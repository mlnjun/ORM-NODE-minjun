<!DOCTYPE html>
<html>
<head>
  <title>모든 사용자간 채팅하기</title>
</head>

<body>
  <h1>서버소캣과 연결된 모든 사용자간 채팅하기</h1>

  대화명:<input type="text" id="nickname"><br>
  메세지:<input type="text" id="message"><br>
  <button id="btnSend">전송</button>

  <hr>
  대화이력보기
  <ul id="chatHistory"></ul>


  <!-- jquery cdn 라이브러리 참조  -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

  <!-- socket.io javascript library 참조  -->
  <script src="/socket.io/socket.io.js"></script>


  <!-- 개발자정의 소캣 통신 기능 구현 -->
  <script>

    // step1 : socket.io.js에서 제공하는 io객체를 이용해 서버소캣(socket.js)와 연결한다.
    // io.connect('서버소캣연결경로주소':http://localhost:3000/)
    // io.connect()메소드를 통해 현재 웹브라우저 웹페이지와 서버 소캣과 연결을 시도합니다.
    var socket = io.connect('/');


    // 전송버튼이 클릭되면 메세지를 서버소캣으로 전송한다.
    $('#btnSend').click(function(){

      // 닉네임값 추출
      var nickname = $('#nickname').val();
      // 사용자 입력 메세지값 추출
      var message = $('#message').val();

      var msgData = `${nickname}:${message}`;


      // step2 : 현재 연결된 서버소캣으로 메시지를 전송
      // socket.emit('서버소캣 메세지 이벤트 수신기명', 전달할 데이터);
      socket.emit('broadcast', msgData);

    });


    // 서버소캣(socket.js)에서 보내주는 클라이언트 이벤트 수신기들 기능 정의
    socket.on('receiveAll', function(msgData){
      console.log("서버소캣에서 보내준 메세지 출력:",msgData);
      // 도착한 메세지 문자열을 ul태그에 li태그형식으로 추가해줍니다.
      $('#chatHistory').append(`<li>${msgData}</li>`);
    });


    // socket.on('receiveTest', function(msgData){
    //   console.log("서버소캣에서 보내준 메세지 출력:",msgData);
    //   // 도착한 메세지 문자열을 ul태그에 li태그형식으로 추가해줍니다.
    //   $('#chatHistory').append(`<li>${msgData}</li>`);
    // });

  </script>

</body>
</html>