
// 자바스크립트 언어 기본 특성을 알아보자
// 1.자바스크립트는 기본적으로 비동기(async) 프로그래밍 방식으로 작동된다.

// Activity1
function fn1(){
  console.log("----fn1");
}

// Activity2  실행하는데 2초 걸린다.
function fn2(cb){

  // 지정한 시간 후에 해당 함수가 실행된다. 대소문자
  // fn()함수가 호출되면 2초를 기다렸다가 내부함수를 실행시킨다.
  // 즉 fn2라는 로그가 fn2()함수가 호출되고 2초 후에 출력된다.
  setTimeout(function(){
    console.log("----fn2");

    // fn2()의 모든 기능이 완료되면 fn3()함수를 호출해 함소 실행순서를 지켜가며 프로그래밍한다.
    // fn3();
    // fn31('fn2에서 호출됨');
    cb();  //
  },2000);
}

// Activity3
function fn3(){
  console.log("----fn3");
}

// Activity4
function fn31(){
  console.log("----fn31");
}


// Task1: fn1()+fn2()+fn3()
// 의도 : fn의 순서와 상관없이 fn1,2,3가 무조건 실행만되면 좋은 경우도 있고
// fn1후에 fn2가 반드시 실행되고 fn3가 실행되어야하는 경우도 있다.(업무프로세스)
// fn1();
// fn2();
// fn3();


// Task2 : 순서를 지켜가면서 비지니스로직을 구현해야하는 경우
// 
// fn1();
// fn2();



// Task3 : 함수안에서 특정함수를 호출해서 작업의 우선순위를 조절하면 함수가 바뀌거나 함수의
// 조건이 바뀌거나하면 매번 해당 함수의 기능을 변경해줘야합니다.
// 자바스크립트 함수는 객체로 인식합니다. > 함수도 다른 함수의 매개변수(파라미터)로 인식할 수 있다.
// 파라미터에 넣을 함수는 ()넣지 않는다. (실행하면 안되기 때문)
fn1();
fn2(fn31);

